datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique @db.VarChar(255)
  password          String
  lang              String             @db.Char(2)
  firstName         String             @db.VarChar(100)
  lastName          String             @db.VarChar(100)
  birthDate         DateTime
  validated         Boolean            @default(false)
  active            Boolean            @default(true)
  acceptedMarketing Boolean
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  refreshTokens     RefreshToken[]
  emailVerification EmailVerification?
  passwordResets    PasswordReset[]
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  userId      String
  jti         String   @unique
  hashedToken String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id          Int       @id @default(autoincrement())
  userId      String    @unique
  hashedToken String    @unique
  sentAt      DateTime
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id          Int       @id @default(autoincrement())
  userId      String
  hashedToken String    @unique
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])
}

model Author {
  id        String        @id @default(uuid())
  olid      String        @unique
  name      String
  bio       String?
  birthDate String?
  image     String?
  works     Work[]
  aliases   AuthorAlias[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model AuthorAlias {
  id       Int    @id @default(autoincrement())
  authorId String
  alias    String
  Author   Author @relation(fields: [authorId], references: [id])
}

model Work {
  id          String   @id @default(uuid())
  olid        String   @unique
  title       String
  description String?
  books       Book[]
  authors     Author[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Book {
  id          String           @id @default(uuid())
  title       String
  publisher   String?
  publishedAt String?
  description String?
  cover       String?
  pages       Int?
  workId      String
  identifiers BookIdentifier[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  work        Work             @relation(fields: [workId], references: [id])
}

model BookIdentifier {
  id               Int                @id @default(autoincrement())
  value            String
  identifierTypeId Int
  bookId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  type             BookIdentifierType @relation(fields: [identifierTypeId], references: [id])
  book             Book               @relation(fields: [bookId], references: [id])

  @@unique([bookId, identifierTypeId, value])
}

model BookIdentifierType {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  BookIdentifier BookIdentifier[]
}
